voidhome_page()
{
printf("\n\n\n\n\n\n\n\t\t\t\tWelcometoattendanceprogram");
printf("\n\t\tAprogramtocomputeallthenecessarystudentinformation");
printf("\n\t\t\t\tPressentertocontinue->");
getch();
}
intmain()
{
intop,i,x;
system("cls");
home_page();
system("cls");
do
{
printf("\n\nWelcometoattendanceprogram");
printf("\nHereyoucan");
printf("\n1.Registerstudentdetails");
printf("\n2.EnterstudentAttendance");
printf("\n3.Displayrecord");
printf("\n4.Deleteentry");
printf("\n5.Exit");
scanf("%d",&op);
switch(op)
{
	case1:
printf("Entertotalno.ofstudentsinclass");
scanf("%d",&x);
for(i=0;i<x;i++)
register_student();
break;
case2:
attendance_entry();
break;
case3:
record_display();

13

break;
case4:
delete_entry();
break;
case5:
printf("\nThankyou");
exit(0);
break;
default:
printf("Invalidpress");
break;
}
}while(op!=4);
return0;
getch();
}

voidenterdata(node*node1)
{
intyear,i,x;
floatsum=0;
printf("\n\nEnterUSN");
scanf("%s",&node1->id);
printf("\nEnterName\t");
scanf("%s",&node1->name);
printf("\nEnterFather'sname\t");
scanf("%s",&node1->fname);

14

printf("\nEnterSem\t");
scanf("%d",&node1->sem);
if(node1->sem<=0||node1->sem>=9)
{
	printf("\nwrongentry!Pleaseenterdayagain");
scanf("%d",&node1->sem);
}
f=fopen("Register.txt","a");
fptr=fopen("record_sheet.txt","a");
fprintf(f,"\nUSN:%s\tName:%s\tFather'sName:%s\tSem:%d",
node1->id,node1->name,node1->fname,node1->sem);
fprintf(fptr,"\nUSN:%s\tName:%s\tFather'sName:%s\tSem:%d",
node1->id,node1->name,node1->fname,node1->sem);
fclose(fptr);
fclose(f);
}
voidattendance_entry()
{
intpres=0,abse=0,holid=0,i;
inttotal=0;
charusn[15];
charma;
node*start;
start=head;
printf("EnterUsn");
scanf("%s",&usn);
while(strcmp(start->id,usn)!=0)
start=start->next;
printf("\nNowprovidetheattendanceforamonth\nP:Present\tA:Absent\tH:Holiday\n");
f=fopen("Attendance_record.txt","a");
fprintf(f,"\n--------------------------------------------------------------------------------------------");
fprintf(f,"\nUSN:\t%s\n",usn);
printf("\nEntermonth&Year:");
scanf("%d%d",&start->m,&start->y);
for(i=1;i<=31;i++)
{
printf("\ndate:%d/%d/%d",i,start->m,start->y);
scanf("\t%c",&start->attendance);
if(start->attendance=='p')
{
pres++;
}
elseif(start->attendance=='a')
{
abse++;
}
elseif(start->attendance=='h')
{
holid++;
}
fprintf(f,"\nDate:%d/%d/%d\tattendance:%c\n",i,start->m,start->y,start
->attendance);
total=(pres+abse)-holid;
}
start->total_days=total;
start->pres=pres;
start->abse=abse;
start->holid=holid;
printf("\nTotaldays:%d\tPresent:%d\n",total,pres);
fprintf(f,"\nTotaldays:%d\tDayspresent:%d\tHolidays:%d",
start->total_days,start->pres,start->holid);
fptr=fopen("record_sheet.txt","a");
fprintf(fptr,"\nTotaldays:%d\tPresentdays:%d\tHolidays:%d",
start->total_days,start->pres,start->holid);
fclose(fptr);
fclose(f);
}
voidrecord_display()
{
charc;
node*start;
fptr=fopen("record_sheet.txt","r");
c=fgetc(fptr);
while(c!=EOF)
{
printf("%c",c);
c=fgetc(fptr);
}
getch();
fclose(fptr);
}
voidrecord_sheet()
{
charc;
node*start;
fptr=fopen("record_sheet.txt","a");
c=fgetc(fptr);
while(c!=EOF)
{
printf("%c",c);
c=fgetc(fptr);
}
getch();
fclose(fptr);
}
voiddelete_entry()
{
node*start,*prev;
charkey[15];
if(head==NULL)
{
printf("\nNoentrypresent.\nFirstmakeanentry");
}
else
{
start=head;
printf("\n\nenterusnfordeletion");
scanf("%s",&key);
while(start!=NULL)
{
if(strcmp(start->id,key)==0)
{
if(start==head)
{
prev=NULL;
head=start->next;
free(start);
printf("\n\nnodedeleted");
getch();
main();
}
else
voiddelete_entry()
{
node*start,*prev;
charkey[15];
if(head==NULL)
{
printf("\nNoentrypresent.\nFirstmakeanentry");
}
else
{
start=head;
printf("\n\nenterusnfordeletion");
scanf("%s",&key);
while(start!=NULL)
{
if(strcmp(start->id,key)==0)
{
if(start==head)
{
prev=NULL;
head=start->next;
free(start);
printf("\n\nnodedeleted");
getch();
main();
}
}
prev=start;
start=start->next;
}
printf("\nIdenteredisnotpresent");
getch();

18

main();
}
}
voidregister_student()
{
if(headcount==0)
{
node*new1;
new1=(node*)malloc(sizeof(node));
head=new1;
new1->next=NULL;
enterdata(new1);
headcount++;
}
else
{
printf("\nheadnodecreated");
node*new1,*start;
new1=(node*)malloc(sizeof(node));
start=head;
while(start->next!=NULL)
start=start->next;
enterdata(new1);
start->next=new1;
new1->next=NULL;
}
}
